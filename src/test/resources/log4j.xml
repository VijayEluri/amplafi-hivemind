<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
   <!-- amplafi-hivemind/src/test/resources/log4j.xml -->
   <!-- ============================== -->
   <!-- Append messages to the console -->
   <!-- ============================== -->

         <!-- The default pattern: Date level [logger] Message\n -->
   <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
      <param name="Target" value="System.out"/>
      <param name="Threshold" value="TRACE"/>
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/>
      </layout>
   </appender>

    <!-- BEGIN APPENDER: SOCKET APPENDER (socketLogger) -->
    <!-- Note: if you don't have anything configured to accept the events -->
    <!-- from the socketLogger appender, you'll see an exception on program -->

    <!-- startup (to console), and occasional status messages (to console) -->
    <!-- on whether the log4j system has managed to connect to the specified -->
    <!-- socket.. -->
    <!-- 
    <appender name="socketLogger" class="org.apache.log4j.net.SocketAppender">
        <param name="RemoteHost" value="localhost"/>
        <param name="Port" value="4445"/>
        <param name="LocationInfo" value="true"/>
    </appender>
     -->
    <!-- Note that a SocketAppender doesn't use a layout, and so that tag -->
    <!-- isn't used, here.  It does, however, use information other -->
    <!-- than the layout.  Instead of having arbitrarily named tags, -->
    <!-- however, you'll note that there are multiple "param" tags for -->
    <!-- the necessary information.  Note that certain pieces of -->
    <!-- information are placed within tags created specifically for -->
    <!-- that data (like layout), while others aren't (like RemoteHost). -->
    <!-- Check the log4j.dtd file for additional information on what -->
    <!-- those other tags could be (it's actually pretty nicely commented!), -->
    <!-- if you want, but most of the time you'll probably just be using -->
    <!-- layout and param.  Filter is another one you might find useful, -->
    <!-- and it's included rather like a layout (i.e. a filter tag).  -->

    <!-- BEGIN APPENDER: ROLLING FILE APPENDER (rolling) -->
    <appender name="rolling" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="amplafitest.log"/>
        <param name="MaxFileSize" value="10MB"/>
        <param name="MaxBackupIndex" value="0"/>
        <param name="Threshold" value="TRACE"/>
        <layout class="org.apache.log4j.PatternLayout">

            <param name="ConversionPattern"
                    value="%d %-5p %-17c{2} (%30F:%L) %3x - %m%n"/>
        </layout>
    </appender>
    
    <appender name="errors" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="amplafitest-error.log"/>
        <param name="Threshold" value="WARN"/>
        <param name="MaxFileSize" value="10MB"/>
        <param name="MaxBackupIndex" value="0"/>
        <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern"
               value="%d %-5p %-17c{2} (%30F:%L) %3x - %m%n"/>
        </layout>
    </appender>
    
    <!-- Notice, in the RollingFileAppender example, that the layout used -->
    <!-- requires information (unlike the previous TTCCLayout).  Just like -->
    <!-- the appender tag, the layout tag can contain param tags within -->
    <!-- it to pass information along to the layout itself.  Unlike the -->
    <!-- appender, param is the only type of tag that can be placed within -->
    <!-- a layout tag. -->

    <!-- BEGIN APPENDER: LogFactor5 APPENDER (lf5) -->
    <!-- LogFactor5 is a Swing window that directly receives logging -->
    <!-- messages and displays them. It offers filtering, searching etc. -->
    <!-- similar to Chainsaw or Lumbermill but you don't have to use a -->
    <!-- socket appender so it should be faster when the logging display -->
    <!-- is on the same machine as the program issuing messages. -->
    <appender name="lf5" class="org.apache.log4j.lf5.LF5Appender">
        <param name="MaxNumberOfRecords" value="1000"/>
    </appender>

    <!-- Chainsaw, a logging-viewing tool included with log4j, is capable -->
    <!-- of not only accepting active information from a socket (see -->
    <!-- socketLogger), but can also load an XML file formatted using -->
    <!-- the XMLLayout.  Send information to both and XMLLayout and to -->
    <!-- a socket on which Chainsaw is running, and you can watch chainsaw -->
    <!-- now, and then look at the data in it again later. -->
    <appender class="org.apache.log4j.FileAppender" name="xml">
        <param name="File" value="amplafi_xml.log"/>
        <param name="Append" value="false"/>
        <layout class="org.apache.log4j.xml.XMLLayout"/>
    </appender>

    <!-- LogFactor5 is also capable of loading information from file, -->
    <!-- although the formatting isn't nearly as simple (to configure) -->
    <!-- as the stored file for Chainsaw.  Unfortunately, there appears -->
    <!-- to be no _simple_ way to configure for this file format (yet) -->
    <appender name="lf5Rolling" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="amplafi_lf5.log"/>
        <param name="MaxBackupIndex" value="5"/>
        <param name="MaxFileSize" value="100KB"/>

        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                    value="[slf5s.start]%d{DATE}[slf5s.DATE]%n  %p[slf5s.level]%n%x[slf5s.NDC]%n%t[slf5s.THREAD]%n%c[slf5s.logger]%n  %l[slf5s.LOCATION]%n%m[slf5s.MESSAGE]%n%n"/>
        </layout>
    </appender>

   <!-- =============================== -->
   <!-- Specific to Amplafi             -->
   <!-- =============================== -->
   <logger name="amplafi">
      <level value="INFO"/>
      <appender-ref ref="rolling"/>
   </logger>
   <logger name="com.amplafi">
      <level value="INFO"/>
      <appender-ref ref="rolling"/>
   </logger>
      
   <!-- ================ -->
   <!-- Limit categories -->
   <!-- ================ -->

   <!-- Limit the org.apache logger to INFO as its DEBUG is verbose -->
   <logger name="org.apache">
      <level value="INFO"/>
   </logger>

   <!-- Limit the org.jgroups logger to WARN as its INFO is verbose -->
   <logger name="org.jgroups">
      <level value="WARN"/>
   </logger>
   <logger name="au.id.jericho">
      <level value="WARN"/>
   </logger>
   
   <!-- Limit apache axis to INFO as its DEBUG is even more verbose -->
   <logger name="org.apache.axis">
      <level value="INFO"/>
   </logger>

   <!-- Limit Tapestry categories -->
   <logger name="tapestry">
      <level value="INFO"/>
   </logger>
   <logger name="hivemind">
      <level value="INFO"/>
   </logger>
   
   <!-- Limit Jetty -->
   <logger name="org.mortbay">
      <level value="INFO"/>
   </logger>

    <!-- ============================= -->
    <!-- Limit the Hibernate categories -->
    <!-- ============================= -->
   <logger name="org.hibernate">
      <level value="INFO"/>
   </logger>
    <!-- log HQL query parser activity 
   <logger name="org.hibernate.hql.ast.AST">
      <level value="DEBUG"/>
   </logger>
   -->
    <!-- log just the SQL 
   <logger name="org.hibernate.SQL">
      <level value="DEBUG"/>
   </logger>
    -->
    <!-- log JDBC bind parameters    
   <logger name="org.hibernate.type">
      <level value="DEBUG"/>
   </logger>
     -->

    <!-- log schema export/update
   <logger name="org.hibernate.tool.hbm2ddl">
      <level value="DEBUG"/>
   </logger>
     -->

    <!-- log HQL parse trees 
   <logger name="org.hibernate.hql">
      <level value="DEBUG"/>
   </logger>
-->
    <!-- log cache activity
   <logger name="org.hibernate.cache">
      <level value="DEBUG"/>
   </logger>
 -->
    <!-- log transaction activity 
   <logger name="org.hibernate.transaction">
      <level value="TRACE"/>
   </logger>
-->
    <!-- log JDBC resource acquisition 
   <logger name="org.hibernate.jdbc">
      <level value="DEBUG"/>
   </logger>
-->
    <logger name="com.mchange">
        <level value="INFO"/>
    </logger>
    <logger name="org.amplafi">
        <level value="INFO"/>
    </logger>
    <logger name="com.p6spy">
        <level value="TRACE"/>
    </logger>
    <!-- enable the following line if you want to track down connection -->
    <!-- leakages when using DriverManagerConnectionProvider  -->
    <!-- 
   <logger name="org.hibernate.connection.DriverManagerConnectionProvider">
      <level value="TRACE"/>
      <appender-ref ref="rolling"/>
   </logger>
    -->
    <!-- END HIBERNATE -->   
    <root>
      <!--  <level value="debug"/> -->  
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="rolling"/>
        <appender-ref ref="errors"/>
    </root>
</log4j:configuration>
